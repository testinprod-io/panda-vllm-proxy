// ──────────── PROMETHEUS ────────────

prometheus.remote_write "prometheus" {
    endpoint {
        url = env("PROMETHEUS_HOST")
    }
}

// ──────────────── NODE EXPORTER METRICS ────────────

prometheus.exporter.unix "node_exporter" {
    disable_collectors = ["ipvs", "btrfs", "infiniband", "xfs", "zfs"]
    enable_collectors = ["meminfo"]

    filesystem {
        fs_types_exclude     = "^(autofs|binfmt_misc|bpf|cgroup2?|configfs|debugfs|devpts|devtmpfs|tmpfs|fusectl|hugetlbfs|iso9660|mqueue|nsfs|overlay|proc|procfs|pstore|rpc_pipefs|securityfs|selinuxfs|squashfs|sysfs|tracefs)$"
        mount_points_exclude = "^/(dev|proc|run/credentials/.+|sys|var/lib/docker/.+)($|/)"
        mount_timeout        = "5s"
    }

    netclass {
        ignored_devices = "^(veth.*|cali.*|[a-f0-9]{15})$"
    }

    netdev {
        device_exclude = "^(veth.*|cali.*|[a-f0-9]{15})$"
    }
}

discovery.relabel "node_exporter" {
    targets = prometheus.exporter.unix.node_exporter.targets

    rule {
        target_label = "application"
        replacement = "panda-app-server"
    }

    rule {
        target_label = "job"
        replacement = "node_exporter"
    }

    rule {
        target_label = "instance"
        replacement = env("INSTANCE")
    }

    rule {
        target_label = "environment"
        replacement = env("ENVIRONMENT")
    }

    rule {
        target_label = "source_type"
        replacement = "guest"
    }
}

prometheus.scrape "node_exporter" {
    scrape_interval = "15s"
    targets    = discovery.relabel.node_exporter.output
    forward_to = [prometheus.remote_write.prometheus.receiver]
}

// ──────────────── CADVISOR METRICS ────────────

prometheus.exporter.cadvisor "cadvisor" {
    docker_host = "unix:///var/run/docker.sock"

    storage_duration = "5m"
}

discovery.relabel "cadvisor_relabel" {
    targets = prometheus.exporter.cadvisor.cadvisor.targets

    rule {
        target_label = "application"
        replacement = "panda-vllm-proxy"
    }

    rule {
        target_label = "job"
        replacement = "cadvisor"
    }

    rule {
        target_label = "instance"
        replacement = env("INSTANCE")
    }

    rule {
        target_label = "environment"
        replacement = env("ENVIRONMENT")
    }

    rule {
        target_label = "source_type"
        replacement = "guest"
    }
}

prometheus.scrape "cadvisor" {
    targets    = discovery.relabel.cadvisor_relabel.output
    forward_to = [prometheus.remote_write.prometheus.receiver]
}

// ──────────────── NVIDIA GPU METRICS ────────────

prometheus.scrape "nvidia_smi_exporter" {
    targets = [
        { __address__ = "nvidia-smi-exporter:9835", application = "panda-vllm-proxy", job = "nvidia-smi-exporter", instance = env("INSTANCE"), environment = env("ENVIRONMENT"), source_type = "guest" },
    ]

    scrape_interval = "15s"
    metrics_path = "/metrics"
    scheme = "http"
    
    forward_to = [prometheus.remote_write.prometheus.receiver]
}

// ──────────────── VLLM & MILVUS METRICS ────────────

prometheus.scrape "metrics" {
    targets = [
        { __address__ = "vllm-deepseek:8000", application = "panda-vllm-proxy", job = "vllm-deepseek", instance = env("INSTANCE"), environment = env("ENVIRONMENT"), source_type = "guest" },
        { __address__ = "vllm-llama:8000", application = "panda-vllm-proxy", job = "vllm-llama", instance = env("INSTANCE"), environment = env("ENVIRONMENT"), source_type = "guest" },
        { __address__ = "standalone:9091", application = "panda-vllm-proxy", job = "milvus", instance = env("INSTANCE"), environment = env("ENVIRONMENT"), source_type = "guest" },
    ]
  
    scrape_interval = "15s"
    metrics_path = "/metrics"
    scheme = "http"
    
    forward_to = [prometheus.remote_write.prometheus.receiver]
}

// ──────────────── ALLOY METRICS ────────────

prometheus.scrape "alloy_self" {
    targets = [
        { __address__ = "localhost:12345", application = "panda-vllm-proxy", job = "alloy" },
    ]
    
    scrape_interval = "15s"
    scrape_timeout = "10s"
        
    forward_to = [prometheus.remote_write.prometheus.receiver]
}

// ──────────────── LOKI LOGS ───────────────

discovery.docker "linux" {
    host = "unix:///var/run/docker.sock"
}

discovery.relabel "getting_started" {
	targets = []

	rule {
		source_labels = ["__meta_docker_container_name"]
		regex         = "/(.*)"
		target_label  = "container"
	}

    rule {
        target_label = "application"
        replacement = "panda-vllm-proxy"
    }

    rule {
        target_label = "instance"
        replacement = env("INSTANCE")
    }

    rule {
        target_label = "environment"
        replacement = env("ENVIRONMENT")
    }

    rule {
        target_label = "source_type"
        replacement = "guest"
    }
}

loki.source.docker "containers" {
    host    = "unix:///var/run/docker.sock"
    targets = discovery.docker.linux.targets
    relabel_rules = discovery.relabel.getting_started.rules
    
    forward_to = [loki.write.to_loki.receiver]
}

loki.write "to_loki" {
    endpoint {
        url = env("LOKI_HOST")
    }
}
