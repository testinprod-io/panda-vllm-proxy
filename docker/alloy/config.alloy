// ──────────── PROMETHEUS ────────────

prometheus.remote_write "prometheus" {
    endpoint {
        url = env("PROMETHEUS_HOST")
    }
}

// ──────────────── CADVISOR METRICS ────────────

prometheus.exporter.cadvisor "cadvisor" {
    docker_host = "unix:///var/run/docker.sock"

    storage_duration = "5m"
}

discovery.relabel "cadvisor_relabel" {
    targets = prometheus.exporter.cadvisor.cadvisor.targets

    rule {
        target_label = "instance"
        replacement = "cudo-h100-1"
    }

    rule {
        target_label = "environment"
        replacement = "production"
    }

    rule {
        target_label = "source_type"
        replacement = "guest"
    }
}

prometheus.scrape "cadvisor" {
    targets    = discovery.relabel.cadvisor_relabel.output
    forward_to = [prometheus.remote_write.prometheus.receiver]
}

// ──────────────── VLLM & MILVUS METRICS ────────────

prometheus.scrape "metrics" {
    targets = [
        { __address__ = "vllm-deepseek:8000", job = "vllm-deepseek", instance = "cudo-h100-1", environment = "production", source_type = "guest" },
        { __address__ = "vllm-llama:8000", job = "vllm-llama", instance = "cudo-h100-1", environment = "production", source_type = "guest" },
        { __address__ = "standalone:9091", job = "milvus", instance = "cudo-h100-1", environment = "production", source_type = "guest" },
    ]
  
    scrape_interval = "15s"
    metrics_path = "/metrics"
    scheme = "http"
    
    forward_to = [prometheus.remote_write.prometheus.receiver]
}

// ──────────────── ALLOY METRICS ────────────

prometheus.scrape "alloy_self" {
    targets = [
        { __address__ = "localhost:12345", job = "alloy" },
    ]
    
    scrape_interval = "15s"
    scrape_timeout = "10s"
        
    forward_to = [prometheus.remote_write.prometheus.receiver]
}

// ──────────────── LOKI LOGS ───────────────

discovery.docker "linux" {
    host = "unix:///var/run/docker.sock"
}

discovery.relabel "getting_started" {
	targets = []

	rule {
		source_labels = ["__meta_docker_container_name"]
		regex         = "/(.*)"
		target_label  = "container"
	}

    rule {
        target_label = "instance"
        replacement = "cudo-h100-1"
    }

    rule {
        target_label = "environment"
        replacement = "production"
    }

    rule {
        target_label = "source_type"
        replacement = "guest"
    }
}

loki.source.docker "containers" {
    host    = "unix:///var/run/docker.sock"
    targets = discovery.docker.linux.targets
    relabel_rules = discovery.relabel.getting_started.rules
    
    forward_to = [loki.write.to_loki.receiver]
}

loki.write "to_loki" {
    endpoint {
        url = env("LOKI_HOST")
    }
}
